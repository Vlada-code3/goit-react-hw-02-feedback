{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.js","components/section/Section.js","components/statistics/Statistics.js","components/feedback/Feedback.js","components/App.js","index.js"],"names":["FeedbackOptions","handleInc","name","onClick","Section","title","children","Statistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","propsTypes","PropTypes","number","func","isRequired","Feedback","state","e","target","setState","prevState","Math","round","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"8OAmBeA,EAfS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACvB,OACI,qCACI,wBAAQC,KAAK,OAAOC,QAASF,EAA7B,kBACA,wBAAQC,KAAK,UAAUC,QAASF,EAAhC,qBACA,wBAAQC,KAAK,MAAMC,QAASF,EAA5B,qBCEGG,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,gCACI,6BAAKD,IACJC,M,gBCHPC,EAAa,SAAC,GAAiF,IAA/EC,EAA8E,EAA9EA,KAAMC,EAAwE,EAAxEA,QAASC,EAA+D,EAA/DA,IAAKC,EAA0D,EAA1DA,mBAAoBC,EAAsC,EAAtCA,gCAC1D,OACI,mCACI,+BACI,6BACI,uCAAUJ,OAEd,6BACI,0CAAaC,OAEjB,6BACI,sCAASC,OAEb,6BACI,wCAAWC,SAEf,6BACI,mDAAsBC,IAAtB,eAOpBL,EAAWM,WAAa,CACpBL,KAAMM,IAAUC,OAChBN,QAASK,IAAUC,OACnBL,IAAKI,IAAUC,OACfJ,mBAAoBG,IAAUE,KAC9BJ,gCAAiCE,IAAUE,MAC7CC,WAIaV,QC9BMW,E,4MACjBC,MAAQ,CACJX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAITT,UAAY,SAACmB,GACT,IAAMlB,EAAOkB,EAAEC,OAAOnB,KACtB,EAAKoB,UAAS,SAAAC,GACV,OAAO,eACFrB,EAAOqB,EAAUrB,GAAQ,O,EAKtCS,mBAAqB,WACjB,MAA+B,EAAKQ,MACpC,OADA,EAAQX,KAAR,EAAcC,QAAd,EAAuBC,K,EAI3BE,gCAAkC,WAI9B,OAHeY,KAAKC,MACf,EAAKN,MAAMX,KAAO,EAAKG,qBAAwB,M,4CAQxD,WACI,OACI,qCACI,cAAC,EAAD,CAASN,MAAM,wBAAf,SACI,cAAC,EAAD,CAAiBJ,UAAWyB,KAAKzB,cAGrC,cAAC,EAAD,CAASI,MAAM,aAAf,SACKqB,KAAKf,qBACF,cAAC,EAAD,CACIH,KAAMkB,KAAKP,MAAMX,KACjBC,QAASiB,KAAKP,MAAMV,QACpBC,IAAKgB,KAAKP,MAAMT,IAChBC,mBAAoBe,KAAKf,mBACzBC,gCAAiCc,KAAKd,kCAE1C,2D,GAhDce,aCIvBC,EARH,WACV,OACE,mCACC,cAAC,EAAD,O,MCALC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.ea6067a4.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ handleInc }) => {\n    return (\n        <>\n            <button name=\"good\" onClick={handleInc}>Good</button>\n            <button name=\"neutral\" onClick={handleInc}>Neutral</button>\n            <button name=\"bad\" onClick={handleInc}>Bad</button>\n        </>\n    );\n}\n\nFeedbackOptions.propTypes = {\n    handleInc: PropTypes.func.isRequired,\n}\n\n\nexport default FeedbackOptions;","import React from 'react';\n\nconst Section = ({ title, children }) => {\n    return (\n        <div>\n            <h2>{title}</h2>\n            {children}\n        </div>\n    )\n}\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, countTotalFeedback, countPositiveFeedbackPercentage }) => {\n    return (\n        <>\n            <ul>\n                <li>\n                    <p>Good: {good}</p>\n                </li>\n                <li>\n                    <p>Neutral: {neutral}</p>\n                </li>\n                <li>\n                    <p>Bad: {bad}</p>\n                </li>\n                <li>\n                    <p>Total: {countTotalFeedback()}</p>\n                </li>\n                <li>\n                    <p>Positive Feedback:{countPositiveFeedbackPercentage()}%</p>\n                </li>\n            </ul>\n        </>\n    );\n}\n\nStatistics.propsTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    countTotalFeedback: PropTypes.func,\n    countPositiveFeedbackPercentage: PropTypes.func,\n}.isRequired\n\n\n\nexport default Statistics;","\nimport React, { Component } from 'react';\nimport FeedbackOptions from '../feedbackOptions/FeedbackOptions';\nimport Section from '../section/Section'\nimport Statistics from '../statistics/Statistics' ;\n\n\nexport default class Feedback extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n\n\n    handleInc = (e) => {\n        const name = e.target.name;\n        this.setState(prevState => {\n            return {\n                [name]: prevState[name] + 1,\n            };\n        });\n    }\n\n    countTotalFeedback = () => {\n        const { good, neutral, bad } = this.state;\n        return good + neutral + bad;\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        const result = Math.round(\n            (this.state.good / this.countTotalFeedback()) * 100,\n        );\n        return result;\n    };\n\n\n\n\n    render() {\n        return (\n            <>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptions handleInc={this.handleInc} />\n                </Section>\n\n                <Section title=\"Statistics\">\n                    {this.countTotalFeedback() ? (\n                        <Statistics\n                            good={this.state.good}\n                            neutral={this.state.neutral}\n                            bad={this.state.bad}\n                            countTotalFeedback={this.countTotalFeedback}\n                            countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage} />\n                    ) : (\n                        <p>No feedback given</p>\n                    )}\n                </Section>\n            </>\n        )\n    }\n};","import React from 'react'\nimport Feedback from './feedback/Feedback'\n\nconst App = () => {\n  return (\n    <>\n     <Feedback/>\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}